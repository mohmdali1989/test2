// <auto-generated />
using System;
using Accountant.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Accountant.Migrations
{
    [DbContext(typeof(DataContextDB))]
    [Migration("20240528193630_Accountant")]
    partial class Accountant
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-rc.1.23419.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Accountant.Models.Briefs", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IDDriver")
                        .HasColumnType("int");

                    b.Property<int?>("IDGeneralUser")
                        .HasColumnType("int");

                    b.Property<int?>("IDMainUser")
                        .HasColumnType("int");

                    b.Property<bool>("PushStatus")
                        .HasColumnType("bit");

                    b.Property<string>("PushStatusDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VacationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IDDriver");

                    b.HasIndex("IDGeneralUser");

                    b.HasIndex("IDMainUser");

                    b.ToTable("briefs");
                });

            modelBuilder.Entity("Accountant.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CarModel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CarType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarWeight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IDDriver")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("IDGeneralUser")
                        .HasColumnType("int");

                    b.Property<int?>("IDMainUser")
                        .HasColumnType("int");

                    b.Property<string>("MaximumLoad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameCar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IDDriver");

                    b.HasIndex("IDGeneralUser");

                    b.HasIndex("IDMainUser");

                    b.HasIndex("CarNumber", "CompanyId")
                        .IsUnique()
                        .HasFilter("[CompanyId] IS NOT NULL");

                    b.ToTable("car");
                });

            modelBuilder.Entity("Accountant.Models.CarInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("CarModel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IDGeneralUser")
                        .HasColumnType("int");

                    b.Property<int?>("IDMainUser")
                        .HasColumnType("int");

                    b.Property<string>("InsuranceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LicenseExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LicenseStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NumberCar")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IDGeneralUser");

                    b.HasIndex("IDMainUser");

                    b.HasIndex("NumberCar", "CompanyId")
                        .IsUnique()
                        .HasFilter("[CompanyId] IS NOT NULL");

                    b.ToTable("carInsurance");
                });

            modelBuilder.Entity("Accountant.Models.CarLicense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("CarModel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IDGeneralUser")
                        .HasColumnType("int");

                    b.Property<int?>("IDMainUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("LicenseExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LicenseStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NumberCar")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IDGeneralUser");

                    b.HasIndex("IDMainUser");

                    b.HasIndex("NumberCar", "CompanyId")
                        .IsUnique()
                        .HasFilter("[CompanyId] IS NOT NULL");

                    b.ToTable("carLicense");
                });

            modelBuilder.Entity("Accountant.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyFunction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.ToTable("company");
                });

            modelBuilder.Entity("Accountant.Models.CompanyDebts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AmountDebt")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("DescriptionReligion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HistoryReligion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IDGeneralUser")
                        .HasColumnType("int");

                    b.Property<int?>("IDMainUser")
                        .HasColumnType("int");

                    b.Property<string>("NameDebtor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeDebt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IDGeneralUser");

                    b.HasIndex("IDMainUser");

                    b.ToTable("companyDebts");
                });

            modelBuilder.Entity("Accountant.Models.CompanyObligations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AmountDebt")
                        .HasColumnType("int");

                    b.Property<string>("CommitmentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("IDGeneralUser")
                        .HasColumnType("int");

                    b.Property<int?>("IDMainUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastDatePayment")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IDGeneralUser");

                    b.HasIndex("IDMainUser");

                    b.ToTable("companyObligations");
                });

            modelBuilder.Entity("Accountant.Models.Contracts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyWorkSite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ContractExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IDGeneralUser")
                        .HasColumnType("int");

                    b.Property<int?>("IDMainUser")
                        .HasColumnType("int");

                    b.Property<string>("NameCompany")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberDays")
                        .HasColumnType("int");

                    b.Property<int>("NumberHours")
                        .HasColumnType("int");

                    b.Property<int>("WatchPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IDGeneralUser");

                    b.HasIndex("IDMainUser");

                    b.ToTable("contracts");
                });

            modelBuilder.Entity("Accountant.Models.CustomerDebts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AmountDebt")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("DriverID")
                        .HasColumnType("int");

                    b.Property<DateTime>("HistoryReligion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IDGeneralUser")
                        .HasColumnType("int");

                    b.Property<int?>("IDMainUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DriverID");

                    b.HasIndex("IDGeneralUser");

                    b.HasIndex("IDMainUser");

                    b.ToTable("customerDebts");
                });

            modelBuilder.Entity("Accountant.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .IsRequired()
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HobbyNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IDGeneralUser")
                        .HasColumnType("int");

                    b.Property<int?>("IDMainUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("LicenseExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("NumberWorkingDays")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("monthlyTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IDGeneralUser");

                    b.HasIndex("IDMainUser");

                    b.HasIndex("monthlyTypeId");

                    b.HasIndex("Name", "CompanyId")
                        .IsUnique();

                    b.ToTable("driver");
                });

            modelBuilder.Entity("Accountant.Models.DriversDiary", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("CarId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("CreatedTime")
                        .HasColumnType("time(0)");

                    b.Property<string>("DeliveryLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<int?>("IDGeneralUser")
                        .HasColumnType("int");

                    b.Property<int?>("IDMainUser")
                        .HasColumnType("int");

                    b.Property<string>("LoadType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransportationLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CarId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DriverId");

                    b.HasIndex("IDGeneralUser");

                    b.HasIndex("IDMainUser");

                    b.ToTable("driversDiary");
                });

            modelBuilder.Entity("Accountant.Models.Expenses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CarId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateExchange")
                        .HasColumnType("date");

                    b.Property<int?>("IDGeneralUser")
                        .HasColumnType("int");

                    b.Property<int?>("IDMainUser")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaintenancePrice")
                        .HasColumnType("int");

                    b.Property<string>("NamePiece")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberPieces")
                        .HasColumnType("int");

                    b.Property<int?>("PartsId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.Property<string>("TypeCar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitPrice")
                        .HasColumnType("int");

                    b.Property<int?>("WorkshopsID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IDGeneralUser");

                    b.HasIndex("IDMainUser");

                    b.HasIndex("PartsId");

                    b.HasIndex("WorkshopsID");

                    b.ToTable("expenses");
                });

            modelBuilder.Entity("Accountant.Models.Fuel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("CarId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("FuelProviderID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("FuelQuantity")
                        .HasColumnType("int");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IDGeneralUser")
                        .HasColumnType("int");

                    b.Property<int?>("IDMainUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("SupplyDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("SupplyDateOnly")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("SupplyTimeOnly")
                        .HasColumnType("time");

                    b.Property<int?>("workDiaryID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("CarId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FuelProviderID");

                    b.HasIndex("IDGeneralUser");

                    b.HasIndex("IDMainUser");

                    b.HasIndex("workDiaryID");

                    b.ToTable("fuel");
                });

            modelBuilder.Entity("Accountant.Models.FuelProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("IDGeneralUser")
                        .HasColumnType("int");

                    b.Property<int?>("IDMainUser")
                        .HasColumnType("int");

                    b.Property<string>("NameFuelProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("stationLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IDGeneralUser");

                    b.HasIndex("IDMainUser");

                    b.ToTable("fuelProvider");
                });

            modelBuilder.Entity("Accountant.Models.GeneralUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IDMainUser")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IDMainUser");

                    b.HasIndex("Name", "CompanyId")
                        .IsUnique()
                        .HasFilter("[CompanyId] IS NOT NULL");

                    b.ToTable("generalUser");
                });

            modelBuilder.Entity("Accountant.Models.InputCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AmountMoneyReceived")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateReceiptMoney")
                        .HasColumnType("date");

                    b.Property<int?>("IDGeneralUser")
                        .HasColumnType("int");

                    b.Property<int?>("IDMainUser")
                        .HasColumnType("int");

                    b.Property<int>("IDWorkCompanies")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IDGeneralUser");

                    b.HasIndex("IDMainUser");

                    b.HasIndex("IDWorkCompanies");

                    b.ToTable("inputCompany");
                });

            modelBuilder.Entity("Accountant.Models.MainUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("mainUser");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Confirmed = true,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "mohmdali",
                            Password = "123"
                        });
                });

            modelBuilder.Entity("Accountant.Models.MainUserTem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("mainUserTem");
                });

            modelBuilder.Entity("Accountant.Models.Monthly", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("HandDeliveryAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("IDDriver")
                        .HasColumnType("int");

                    b.Property<int?>("IDGeneralUser")
                        .HasColumnType("int");

                    b.Property<int?>("IDMainUser")
                        .HasColumnType("int");

                    b.Property<DateOnly>("MonthlyReceiptDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("MonthlyReceiptTimer")
                        .HasColumnType("time");

                    b.Property<int>("NumberVacationDays")
                        .HasColumnType("int");

                    b.Property<int>("NumberWorkingDays")
                        .HasColumnType("int");

                    b.Property<decimal?>("TransferAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("monthlyTypeId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IDDriver");

                    b.HasIndex("IDGeneralUser");

                    b.HasIndex("IDMainUser");

                    b.HasIndex("monthlyTypeId");

                    b.ToTable("monthly");
                });

            modelBuilder.Entity("Accountant.Models.MonthlyType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("MonthlyOrMemoirs")
                        .HasColumnType("int");

                    b.Property<string>("MonthlyOrMemoirsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("MonthlyTypes");

                    b.HasData(
                        new
                        {
                            id = 1,
                            MonthlyOrMemoirs = 0,
                            MonthlyOrMemoirsName = "الشهريات"
                        },
                        new
                        {
                            id = 2,
                            MonthlyOrMemoirs = 1,
                            MonthlyOrMemoirsName = "اليوميات"
                        });
                });

            modelBuilder.Entity("Accountant.Models.PagesPermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Briefs")
                        .HasColumnType("bit");

                    b.Property<bool>("Car")
                        .HasColumnType("bit");

                    b.Property<bool>("Company")
                        .HasColumnType("bit");

                    b.Property<bool>("CompanyDebts")
                        .HasColumnType("bit");

                    b.Property<bool>("CompanyObligations")
                        .HasColumnType("bit");

                    b.Property<bool>("Contracts")
                        .HasColumnType("bit");

                    b.Property<bool>("CustomerDebts")
                        .HasColumnType("bit");

                    b.Property<bool>("Driver")
                        .HasColumnType("bit");

                    b.Property<bool>("DriversDiary")
                        .HasColumnType("bit");

                    b.Property<bool>("Expenses")
                        .HasColumnType("bit");

                    b.Property<bool>("Fuel")
                        .HasColumnType("bit");

                    b.Property<bool>("FuelProvider")
                        .HasColumnType("bit");

                    b.Property<bool>("GeneralUser")
                        .HasColumnType("bit");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.Property<bool>("InputCompany")
                        .HasColumnType("bit");

                    b.Property<bool>("InsuranceCar")
                        .HasColumnType("bit");

                    b.Property<bool>("LicenseCar")
                        .HasColumnType("bit");

                    b.Property<bool>("MainUser")
                        .HasColumnType("bit");

                    b.Property<bool>("MainUserTem")
                        .HasColumnType("bit");

                    b.Property<bool>("Memo")
                        .HasColumnType("bit");

                    b.Property<bool>("Monthly")
                        .HasColumnType("bit");

                    b.Property<bool>("Payments")
                        .HasColumnType("bit");

                    b.Property<bool>("ProgramUser")
                        .HasColumnType("bit");

                    b.Property<bool>("RepairWorkshops")
                        .HasColumnType("bit");

                    b.Property<bool>("ReportscCar")
                        .HasColumnType("bit");

                    b.Property<bool>("SparePartsCenters")
                        .HasColumnType("bit");

                    b.Property<bool>("TrafficViolations")
                        .HasColumnType("bit");

                    b.Property<bool>("WorkCompanies")
                        .HasColumnType("bit");

                    b.Property<bool>("WorkDiary")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("pagesPermissions");
                });

            modelBuilder.Entity("Accountant.Models.Payments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatePayment")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IDGeneralUser")
                        .HasColumnType("int");

                    b.Property<int?>("IDMainUser")
                        .HasColumnType("int");

                    b.Property<int>("PaymentAmount")
                        .HasColumnType("int");

                    b.Property<string>("PaymentHolder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IDGeneralUser");

                    b.HasIndex("IDMainUser");

                    b.ToTable("payments");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsBriefs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("permissionsBriefs");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsCar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("permissionsCar");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("permissionsCompany");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsCompanyDebts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("permissionsCompanyDebts");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsCompanyObligations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("permissionsCompanyObligations");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsContracts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("permissionsContracts");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsCustomerDebts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("permissionsCustomerDebts");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsDriver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("permissionsDriver");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsDriversDiary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("permissionsDriversDiary");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsExpenses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("permissionsExpenses");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsFuel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("PermissionsFuel");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsFuelProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("permissionsFuelProvider");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsGeneralUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("permissionsGeneralUser");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsInputCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("permissionsInputCompany");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsInsuranceCar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("permissionsInsuranceCar");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsLicenseCar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("permissionsLicenseCar");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsMainUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("permissionsMainUser");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsMainUserTem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("permissionsMainUserTem");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsMemo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("permissionsMemo");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsMonthly", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("permissionsMonthly");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsPayments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("permissionsPayments");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsProgramUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("permissionsProgramUser");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsRepairWorkshops", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("permissionsRepairWorkshops");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsReportscCar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("permissionsReportscCar");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsSparePartsCenters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("permissionsSparePartsCenters");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsTrafficViolations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("permissionsTrafficViolations");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsWorkCompanies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("permissionsWorkCompanies");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsWorkDiary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("permissionsWorkDiary");
                });

            modelBuilder.Entity("Accountant.Models.ProgramUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("programUser");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "mohmd",
                            Password = "123"
                        });
                });

            modelBuilder.Entity("Accountant.Models.RepairWorkshops", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("IDGeneralUser")
                        .HasColumnType("int");

                    b.Property<int?>("IDMainUser")
                        .HasColumnType("int");

                    b.Property<string>("NameRepairShop")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WorkingHours")
                        .HasColumnType("int");

                    b.Property<string>("WorkshopLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkshopSpecialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IDGeneralUser");

                    b.HasIndex("IDMainUser");

                    b.HasIndex("NameRepairShop", "CompanyId")
                        .IsUnique()
                        .HasFilter("[CompanyId] IS NOT NULL");

                    b.ToTable("repairWorkshops");
                });

            modelBuilder.Entity("Accountant.Models.SparePartsCenters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CenterSpecialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CenterWorkingHours")
                        .HasColumnType("int");

                    b.Property<string>("CentrLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("IDGeneralUser")
                        .HasColumnType("int");

                    b.Property<int?>("IDMainUser")
                        .HasColumnType("int");

                    b.Property<string>("NameCenter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IDGeneralUser");

                    b.HasIndex("IDMainUser");

                    b.ToTable("sparePartsCenters");
                });

            modelBuilder.Entity("Accountant.Models.TrafficViolations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AmountViolated")
                        .HasColumnType("int");

                    b.Property<int?>("CarId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateOfViolation")
                        .HasColumnType("date");

                    b.Property<int?>("IDGeneralUser")
                        .HasColumnType("int");

                    b.Property<int?>("IDMainUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdDrivr")
                        .HasColumnType("int");

                    b.Property<string>("LocationOfViolation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PushStatus")
                        .HasColumnType("bit");

                    b.Property<TimeOnly>("TiemOfViolation")
                        .HasColumnType("time");

                    b.Property<DateOnly>("dateLastTimePayFine")
                        .HasColumnType("date");

                    b.Property<string>("reasonForViolation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IDGeneralUser");

                    b.HasIndex("IDMainUser");

                    b.HasIndex("IdDrivr");

                    b.ToTable("trafficViolations");
                });

            modelBuilder.Entity("Accountant.Models.WorkCompanies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyWorkSite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ContractExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefaultNumberDays")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IDGeneralUser")
                        .HasColumnType("int");

                    b.Property<int?>("IDMainUser")
                        .HasColumnType("int");

                    b.Property<string>("NumberVirtualHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureOfCntract")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WatchPrice")
                        .HasColumnType("int");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IDGeneralUser");

                    b.HasIndex("IDMainUser");

                    b.HasIndex("CompanyName", "CompanyId")
                        .IsUnique()
                        .HasFilter("[CompanyId] IS NOT NULL");

                    b.ToTable("workCompanies");
                });

            modelBuilder.Entity("Accountant.Models.WorkDiary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CarId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("CreatedDateOnly")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("CreatedDateTime")
                        .HasColumnType("time");

                    b.Property<string>("DeliveryLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DriverId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("IDGeneralUser")
                        .HasColumnType("int");

                    b.Property<int?>("IDMainUser")
                        .HasColumnType("int");

                    b.Property<string>("LoadType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeansTransportation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberLoad")
                        .HasColumnType("int");

                    b.Property<int?>("OperatorId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransportationLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransportationPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DriverId");

                    b.HasIndex("IDGeneralUser");

                    b.HasIndex("IDMainUser");

                    b.HasIndex("OperatorId");

                    b.ToTable("workDiary");
                });

            modelBuilder.Entity("Accountant.Models.Briefs", b =>
                {
                    b.HasOne("Accountant.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Accountant.Models.Driver", "Drivers")
                        .WithMany()
                        .HasForeignKey("IDDriver");

                    b.HasOne("Accountant.Models.GeneralUser", "GeneralUser")
                        .WithMany()
                        .HasForeignKey("IDGeneralUser");

                    b.HasOne("Accountant.Models.MainUser", "MainUser")
                        .WithMany()
                        .HasForeignKey("IDMainUser");

                    b.Navigation("Company");

                    b.Navigation("Drivers");

                    b.Navigation("GeneralUser");

                    b.Navigation("MainUser");
                });

            modelBuilder.Entity("Accountant.Models.Car", b =>
                {
                    b.HasOne("Accountant.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Accountant.Models.Driver", "driver")
                        .WithMany()
                        .HasForeignKey("IDDriver")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Accountant.Models.GeneralUser", "GeneralUser")
                        .WithMany()
                        .HasForeignKey("IDGeneralUser");

                    b.HasOne("Accountant.Models.MainUser", "MainUser")
                        .WithMany()
                        .HasForeignKey("IDMainUser");

                    b.Navigation("Company");

                    b.Navigation("GeneralUser");

                    b.Navigation("MainUser");

                    b.Navigation("driver");
                });

            modelBuilder.Entity("Accountant.Models.CarInsurance", b =>
                {
                    b.HasOne("Accountant.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId");

                    b.HasOne("Accountant.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Accountant.Models.GeneralUser", "GeneralUser")
                        .WithMany()
                        .HasForeignKey("IDGeneralUser");

                    b.HasOne("Accountant.Models.MainUser", "MainUser")
                        .WithMany()
                        .HasForeignKey("IDMainUser");

                    b.Navigation("Car");

                    b.Navigation("Company");

                    b.Navigation("GeneralUser");

                    b.Navigation("MainUser");
                });

            modelBuilder.Entity("Accountant.Models.CarLicense", b =>
                {
                    b.HasOne("Accountant.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId");

                    b.HasOne("Accountant.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Accountant.Models.GeneralUser", "GeneralUser")
                        .WithMany()
                        .HasForeignKey("IDGeneralUser");

                    b.HasOne("Accountant.Models.MainUser", "MainUser")
                        .WithMany()
                        .HasForeignKey("IDMainUser");

                    b.Navigation("Car");

                    b.Navigation("Company");

                    b.Navigation("GeneralUser");

                    b.Navigation("MainUser");
                });

            modelBuilder.Entity("Accountant.Models.CompanyDebts", b =>
                {
                    b.HasOne("Accountant.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Accountant.Models.GeneralUser", "GeneralUser")
                        .WithMany()
                        .HasForeignKey("IDGeneralUser");

                    b.HasOne("Accountant.Models.MainUser", "MainUser")
                        .WithMany()
                        .HasForeignKey("IDMainUser");

                    b.Navigation("Company");

                    b.Navigation("GeneralUser");

                    b.Navigation("MainUser");
                });

            modelBuilder.Entity("Accountant.Models.CompanyObligations", b =>
                {
                    b.HasOne("Accountant.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Accountant.Models.GeneralUser", "GeneralUser")
                        .WithMany()
                        .HasForeignKey("IDGeneralUser");

                    b.HasOne("Accountant.Models.MainUser", "MainUser")
                        .WithMany()
                        .HasForeignKey("IDMainUser");

                    b.Navigation("Company");

                    b.Navigation("GeneralUser");

                    b.Navigation("MainUser");
                });

            modelBuilder.Entity("Accountant.Models.Contracts", b =>
                {
                    b.HasOne("Accountant.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Accountant.Models.GeneralUser", "GeneralUser")
                        .WithMany()
                        .HasForeignKey("IDGeneralUser");

                    b.HasOne("Accountant.Models.MainUser", "MainUser")
                        .WithMany()
                        .HasForeignKey("IDMainUser");

                    b.Navigation("Company");

                    b.Navigation("GeneralUser");

                    b.Navigation("MainUser");
                });

            modelBuilder.Entity("Accountant.Models.CustomerDebts", b =>
                {
                    b.HasOne("Accountant.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Accountant.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverID");

                    b.HasOne("Accountant.Models.GeneralUser", "GeneralUser")
                        .WithMany()
                        .HasForeignKey("IDGeneralUser");

                    b.HasOne("Accountant.Models.MainUser", "MainUser")
                        .WithMany()
                        .HasForeignKey("IDMainUser");

                    b.Navigation("Company");

                    b.Navigation("Driver");

                    b.Navigation("GeneralUser");

                    b.Navigation("MainUser");
                });

            modelBuilder.Entity("Accountant.Models.Driver", b =>
                {
                    b.HasOne("Accountant.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Accountant.Models.GeneralUser", "GeneralUser")
                        .WithMany()
                        .HasForeignKey("IDGeneralUser");

                    b.HasOne("Accountant.Models.MainUser", "MainUser")
                        .WithMany()
                        .HasForeignKey("IDMainUser");

                    b.HasOne("Accountant.Models.MonthlyType", "monthlyType")
                        .WithMany()
                        .HasForeignKey("monthlyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("GeneralUser");

                    b.Navigation("MainUser");

                    b.Navigation("monthlyType");
                });

            modelBuilder.Entity("Accountant.Models.DriversDiary", b =>
                {
                    b.HasOne("Accountant.Models.Car", "car")
                        .WithMany()
                        .HasForeignKey("CarId");

                    b.HasOne("Accountant.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Accountant.Models.Driver", "driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.HasOne("Accountant.Models.GeneralUser", "GeneralUser")
                        .WithMany()
                        .HasForeignKey("IDGeneralUser");

                    b.HasOne("Accountant.Models.MainUser", "MainUser")
                        .WithMany()
                        .HasForeignKey("IDMainUser");

                    b.Navigation("Company");

                    b.Navigation("GeneralUser");

                    b.Navigation("MainUser");

                    b.Navigation("car");

                    b.Navigation("driver");
                });

            modelBuilder.Entity("Accountant.Models.Expenses", b =>
                {
                    b.HasOne("Accountant.Models.Car", "car")
                        .WithMany("expensesNew")
                        .HasForeignKey("CarId");

                    b.HasOne("Accountant.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Accountant.Models.GeneralUser", "GeneralUser")
                        .WithMany()
                        .HasForeignKey("IDGeneralUser");

                    b.HasOne("Accountant.Models.MainUser", "MainUser")
                        .WithMany()
                        .HasForeignKey("IDMainUser");

                    b.HasOne("Accountant.Models.SparePartsCenters", "sparePartsCenters")
                        .WithMany()
                        .HasForeignKey("PartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Accountant.Models.RepairWorkshops", "repairWorkshops")
                        .WithMany()
                        .HasForeignKey("WorkshopsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("GeneralUser");

                    b.Navigation("MainUser");

                    b.Navigation("car");

                    b.Navigation("repairWorkshops");

                    b.Navigation("sparePartsCenters");
                });

            modelBuilder.Entity("Accountant.Models.Fuel", b =>
                {
                    b.HasOne("Accountant.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId");

                    b.HasOne("Accountant.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Accountant.Models.FuelProvider", "Fuelprovider")
                        .WithMany()
                        .HasForeignKey("FuelProviderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Accountant.Models.GeneralUser", "GeneralUser")
                        .WithMany()
                        .HasForeignKey("IDGeneralUser");

                    b.HasOne("Accountant.Models.MainUser", "MainUser")
                        .WithMany()
                        .HasForeignKey("IDMainUser");

                    b.HasOne("Accountant.Models.WorkDiary", "workDiary")
                        .WithMany()
                        .HasForeignKey("workDiaryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Company");

                    b.Navigation("Fuelprovider");

                    b.Navigation("GeneralUser");

                    b.Navigation("MainUser");

                    b.Navigation("workDiary");
                });

            modelBuilder.Entity("Accountant.Models.FuelProvider", b =>
                {
                    b.HasOne("Accountant.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Accountant.Models.GeneralUser", "GeneralUser")
                        .WithMany()
                        .HasForeignKey("IDGeneralUser");

                    b.HasOne("Accountant.Models.MainUser", "MainUser")
                        .WithMany()
                        .HasForeignKey("IDMainUser");

                    b.Navigation("Company");

                    b.Navigation("GeneralUser");

                    b.Navigation("MainUser");
                });

            modelBuilder.Entity("Accountant.Models.GeneralUser", b =>
                {
                    b.HasOne("Accountant.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Accountant.Models.MainUser", "MainUser")
                        .WithMany()
                        .HasForeignKey("IDMainUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("MainUser");
                });

            modelBuilder.Entity("Accountant.Models.InputCompany", b =>
                {
                    b.HasOne("Accountant.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Accountant.Models.GeneralUser", "GeneralUser")
                        .WithMany()
                        .HasForeignKey("IDGeneralUser");

                    b.HasOne("Accountant.Models.MainUser", "MainUser")
                        .WithMany()
                        .HasForeignKey("IDMainUser");

                    b.HasOne("Accountant.Models.WorkCompanies", "workCompanies")
                        .WithMany()
                        .HasForeignKey("IDWorkCompanies")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("GeneralUser");

                    b.Navigation("MainUser");

                    b.Navigation("workCompanies");
                });

            modelBuilder.Entity("Accountant.Models.MainUser", b =>
                {
                    b.HasOne("Accountant.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Accountant.Models.Monthly", b =>
                {
                    b.HasOne("Accountant.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Accountant.Models.Driver", "driver")
                        .WithMany()
                        .HasForeignKey("IDDriver");

                    b.HasOne("Accountant.Models.GeneralUser", "GeneralUser")
                        .WithMany()
                        .HasForeignKey("IDGeneralUser");

                    b.HasOne("Accountant.Models.MainUser", "MainUser")
                        .WithMany()
                        .HasForeignKey("IDMainUser");

                    b.HasOne("Accountant.Models.MonthlyType", "monthlyType")
                        .WithMany()
                        .HasForeignKey("monthlyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("GeneralUser");

                    b.Navigation("MainUser");

                    b.Navigation("driver");

                    b.Navigation("monthlyType");
                });

            modelBuilder.Entity("Accountant.Models.PagesPermissions", b =>
                {
                    b.HasOne("Accountant.Models.GeneralUser", "IDUsers")
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IDUsers");
                });

            modelBuilder.Entity("Accountant.Models.Payments", b =>
                {
                    b.HasOne("Accountant.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Accountant.Models.GeneralUser", "GeneralUser")
                        .WithMany()
                        .HasForeignKey("IDGeneralUser");

                    b.HasOne("Accountant.Models.MainUser", "MainUser")
                        .WithMany()
                        .HasForeignKey("IDMainUser");

                    b.Navigation("Company");

                    b.Navigation("GeneralUser");

                    b.Navigation("MainUser");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsBriefs", b =>
                {
                    b.HasOne("Accountant.Models.GeneralUser", "IDUsers")
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IDUsers");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsCar", b =>
                {
                    b.HasOne("Accountant.Models.GeneralUser", "IDUsers")
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IDUsers");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsCompany", b =>
                {
                    b.HasOne("Accountant.Models.GeneralUser", "IDUsers")
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IDUsers");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsCompanyDebts", b =>
                {
                    b.HasOne("Accountant.Models.GeneralUser", "IDUsers")
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IDUsers");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsCompanyObligations", b =>
                {
                    b.HasOne("Accountant.Models.GeneralUser", "IDUsers")
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IDUsers");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsContracts", b =>
                {
                    b.HasOne("Accountant.Models.GeneralUser", "IDUsers")
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IDUsers");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsCustomerDebts", b =>
                {
                    b.HasOne("Accountant.Models.GeneralUser", "IDUsers")
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IDUsers");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsDriver", b =>
                {
                    b.HasOne("Accountant.Models.GeneralUser", "IDUsers")
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IDUsers");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsDriversDiary", b =>
                {
                    b.HasOne("Accountant.Models.GeneralUser", "IDUsers")
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IDUsers");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsExpenses", b =>
                {
                    b.HasOne("Accountant.Models.GeneralUser", "IDUsers")
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IDUsers");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsFuel", b =>
                {
                    b.HasOne("Accountant.Models.GeneralUser", "IDUsers")
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IDUsers");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsFuelProvider", b =>
                {
                    b.HasOne("Accountant.Models.GeneralUser", "IDUsers")
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IDUsers");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsGeneralUser", b =>
                {
                    b.HasOne("Accountant.Models.GeneralUser", "IDUsers")
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IDUsers");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsInputCompany", b =>
                {
                    b.HasOne("Accountant.Models.GeneralUser", "IDUsers")
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IDUsers");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsInsuranceCar", b =>
                {
                    b.HasOne("Accountant.Models.GeneralUser", "IDUsers")
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IDUsers");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsLicenseCar", b =>
                {
                    b.HasOne("Accountant.Models.GeneralUser", "IDUsers")
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IDUsers");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsMainUser", b =>
                {
                    b.HasOne("Accountant.Models.GeneralUser", "IDUsers")
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IDUsers");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsMainUserTem", b =>
                {
                    b.HasOne("Accountant.Models.GeneralUser", "IDUsers")
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IDUsers");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsMemo", b =>
                {
                    b.HasOne("Accountant.Models.GeneralUser", "IDUsers")
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IDUsers");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsMonthly", b =>
                {
                    b.HasOne("Accountant.Models.GeneralUser", "IDUsers")
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IDUsers");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsPayments", b =>
                {
                    b.HasOne("Accountant.Models.GeneralUser", "IDUsers")
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IDUsers");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsProgramUser", b =>
                {
                    b.HasOne("Accountant.Models.GeneralUser", "IDUsers")
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IDUsers");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsRepairWorkshops", b =>
                {
                    b.HasOne("Accountant.Models.GeneralUser", "IDUsers")
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IDUsers");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsReportscCar", b =>
                {
                    b.HasOne("Accountant.Models.GeneralUser", "IDUsers")
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IDUsers");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsSparePartsCenters", b =>
                {
                    b.HasOne("Accountant.Models.GeneralUser", "IDUsers")
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IDUsers");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsTrafficViolations", b =>
                {
                    b.HasOne("Accountant.Models.GeneralUser", "IDUsers")
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IDUsers");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsWorkCompanies", b =>
                {
                    b.HasOne("Accountant.Models.GeneralUser", "IDUsers")
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IDUsers");
                });

            modelBuilder.Entity("Accountant.Models.PermissionsWorkDiary", b =>
                {
                    b.HasOne("Accountant.Models.GeneralUser", "IDUsers")
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IDUsers");
                });

            modelBuilder.Entity("Accountant.Models.RepairWorkshops", b =>
                {
                    b.HasOne("Accountant.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Accountant.Models.GeneralUser", "GeneralUser")
                        .WithMany()
                        .HasForeignKey("IDGeneralUser");

                    b.HasOne("Accountant.Models.MainUser", "MainUser")
                        .WithMany()
                        .HasForeignKey("IDMainUser");

                    b.Navigation("Company");

                    b.Navigation("GeneralUser");

                    b.Navigation("MainUser");
                });

            modelBuilder.Entity("Accountant.Models.SparePartsCenters", b =>
                {
                    b.HasOne("Accountant.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Accountant.Models.GeneralUser", "GeneralUser")
                        .WithMany()
                        .HasForeignKey("IDGeneralUser");

                    b.HasOne("Accountant.Models.MainUser", "MainUser")
                        .WithMany()
                        .HasForeignKey("IDMainUser");

                    b.Navigation("Company");

                    b.Navigation("GeneralUser");

                    b.Navigation("MainUser");
                });

            modelBuilder.Entity("Accountant.Models.TrafficViolations", b =>
                {
                    b.HasOne("Accountant.Models.Car", "car")
                        .WithMany()
                        .HasForeignKey("CarId");

                    b.HasOne("Accountant.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Accountant.Models.GeneralUser", "GeneralUser")
                        .WithMany()
                        .HasForeignKey("IDGeneralUser");

                    b.HasOne("Accountant.Models.MainUser", "MainUser")
                        .WithMany()
                        .HasForeignKey("IDMainUser");

                    b.HasOne("Accountant.Models.Driver", "driver")
                        .WithMany()
                        .HasForeignKey("IdDrivr");

                    b.Navigation("Company");

                    b.Navigation("GeneralUser");

                    b.Navigation("MainUser");

                    b.Navigation("car");

                    b.Navigation("driver");
                });

            modelBuilder.Entity("Accountant.Models.WorkCompanies", b =>
                {
                    b.HasOne("Accountant.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Accountant.Models.GeneralUser", "GeneralUser")
                        .WithMany()
                        .HasForeignKey("IDGeneralUser");

                    b.HasOne("Accountant.Models.MainUser", "MainUser")
                        .WithMany()
                        .HasForeignKey("IDMainUser");

                    b.Navigation("Company");

                    b.Navigation("GeneralUser");

                    b.Navigation("MainUser");
                });

            modelBuilder.Entity("Accountant.Models.WorkDiary", b =>
                {
                    b.HasOne("Accountant.Models.Car", "car")
                        .WithMany()
                        .HasForeignKey("CarId");

                    b.HasOne("Accountant.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Accountant.Models.Driver", "driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Accountant.Models.GeneralUser", "GeneralUser")
                        .WithMany()
                        .HasForeignKey("IDGeneralUser");

                    b.HasOne("Accountant.Models.MainUser", "MainUser")
                        .WithMany()
                        .HasForeignKey("IDMainUser");

                    b.HasOne("Accountant.Models.WorkCompanies", "workCompanies")
                        .WithMany()
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("GeneralUser");

                    b.Navigation("MainUser");

                    b.Navigation("car");

                    b.Navigation("driver");

                    b.Navigation("workCompanies");
                });

            modelBuilder.Entity("Accountant.Models.Car", b =>
                {
                    b.Navigation("expensesNew");
                });
#pragma warning restore 612, 618
        }
    }
}
